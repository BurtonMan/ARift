// Fisheye Undistortion Shader
// Written as part of ARift
// in HLSL for DirectX 11
// Created by Nikolaus Heran
// latest change 07. 05. 2015
// Inspired by OCamCalib: Omnidirectional Camera Calibration Toolbox for Matlab
// 			   https://sites.google.com/site/scarabotix/ocamcalib-toolbox
////////////////////////////////////////////////////////////////////////////////
/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer UndistortionBuffer
{
  float Nxc;
  float Nyc;
  float z;
  float p0;

  float p1;
  float p2;
  float p3;
  float p4;
  
  float p5;
  float p6;
  float p7;

  float p8;
  float p9;
  float c;
  float d;
  
  float e;

  float xc;
  float yc;
  float width;
  float height;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
  float4 position : SV_POSITION;
  float2 tex : TEXCOORD0;
};


////////////////////////////////////////////////////////////////////////////////
// Camera Undistortion shader
////////////////////////////////////////////////////////////////////////////////
float4 UndistortionShader(PixelInputType input) : SV_TARGET
{
  float4 textureColor;
  float2 mappedPoint;
  float col; // x; 
  float row; // y; 
  float norm;
  float theta;
  float theta2;
  float theta4;
  float theta6;
  float theta8;
  float rho;
  float eps = pow(0.1f, 13);
  row = (input.tex.x - 0.5)*width + Nxc;
  col = (input.tex.y - 0.5)*height + Nyc;
  norm = sqrt(row*row + col*col);
  if (norm < eps)
  {
    norm = eps;
  }
  theta = atan(z / norm);
  theta2 = theta*theta;
  theta4 = theta2*theta2;
  theta6 = theta4*theta2;
  theta8 = theta4*theta4;
  //    p0 + p1*theta + p2*theta^2 + p3*theta^3      + p4*theta^4 + p5*theta^5      + p6*theta^6
  rho = p0 + p1*theta + p2*theta2  + p3*theta2*theta + p4*theta4  + p5*theta4*theta + p6*theta6 + p7*theta6*theta + p8*theta8 + p9*theta8*theta;
  col = (col / norm)*rho;
  row = (row / norm)*rho;
  col = col*c + row*d + xc;
  row = col*e + row + yc;
  mappedPoint.y = col / width;
  mappedPoint.x = row / height;
  textureColor = shaderTexture.Sample(SampleType, mappedPoint);

  // no wrapping, set border region black
  if ((mappedPoint.x < 0.0f || mappedPoint.x > 1.0f) || (mappedPoint.y < 0.0f || mappedPoint.y > 1.0f))
    textureColor = float4(0.0f, 0.0f, 0.0f, 1.0f);
  return textureColor;
}